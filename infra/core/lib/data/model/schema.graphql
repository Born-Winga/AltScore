schema {
	query: Query
	mutation: Mutation
}

enum DocStatus {
	PROCESSING
	REJECTED
	PROCESSED
	SUBMITTED
}

enum TransactionDescription {
	OVERDRAFT
	LOAN
	DEPOSIT
	PAYMENT
	SAVING
}

enum TransactionType {
	CREDIT
	DEBIT
}

type User @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	name: String!
	email: AWSEmail!
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	apiKey: String
	status: String
	deleted: Boolean
	owner: ID
}

type Document @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	type: String!
	name: String!
	issuer: String!
	password: String
	userId: ID
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	summary: AWSJSON
	hash: String
	shortId: String
	url: String
	deleted: Boolean
	owner: String
}

input ModelDocumentFilterInput {
	status: StringFilterInput
}

input StringFilterInput {
	eq: String
	contains: String
}

type ModelDocumentsConnection @aws_iam @aws_cognito_user_pools {
	items: [Document!]!
	nextToken: String
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelSubscriptionStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	in: [String]
	notIn: [String]
}

input ModelSubscriptionIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	in: [Int]
	notIn: [Int]
}

input ModelSubscriptionFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	in: [Float]
	notIn: [Float]
}

input ModelSubscriptionBooleanInput {
	ne: Boolean
	eq: Boolean
}

input ModelSubscriptionIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	in: [ID]
	notIn: [ID]
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelDocumentConditionInput {
	id: ModelIDInput
	type: ModelStringInput
	name: ModelStringInput
	issuer: ModelStringInput
	password: ModelStringInput
	userId: ModelIDInput
	status: ModelStringInput
	expiryDate: ModelStringInput
	summary: ModelStringInput
	hash: ModelStringInput
	shortId: ModelStringInput
	url: ModelStringInput
	deleted: ModelBooleanInput
	and: [ModelDocumentConditionInput]
	or: [ModelDocumentConditionInput]
	not: ModelDocumentConditionInput
}

input ModelUserConditionInput {
	id: ModelIDInput
	name: ModelStringInput
	email: ModelStringInput
	deleted: ModelBooleanInput
	and: [ModelUserConditionInput]
	or: [ModelUserConditionInput]
	not: ModelUserConditionInput
}
type Query {
	getUser(id: ID!): User @aws_iam @aws_cognito_user_pools @aws_api_key
	getDocument(id: ID!): Document @aws_iam @aws_cognito_user_pools @aws_api_key
	listUsers: [User] @aws_iam @aws_cognito_user_pools @aws_api_key
	listDocuments(
		limit: Int
		nextToken: String
		filter: ModelDocumentFilterInput
	): ModelDocumentsConnection @aws_iam @aws_cognito_user_pools @aws_api_key
}

type Mutation {
	createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
	updateUser(input: UpdateUserInput!): User
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
	createDocument(
		input: CreateDocumentInput!
		condition: ModelDocumentConditionInput
	): Document @aws_iam @aws_cognito_user_pools @aws_api_key
	updateDocument(
		input: UpdateDocumentInput!
		condition: ModelDocumentConditionInput
	): Document @aws_iam @aws_cognito_user_pools @aws_api_key
}

type Subscription {
	onCreateDocument: Document
		@aws_subscribe(mutations: ["createDocument"])
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
}

# Input types
input CreateUserInput {
	id: ID!
	name: String!
	email: AWSEmail!
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	apiKey: String
	status: String
	deleted: Boolean
}

input UpdateUserInput {
	id: ID!
	name: String
	email: AWSEmail
	status: String
	deleted: Boolean
}

input CreateDocumentInput {
	id: ID!
	type: String
	name: String!
	issuer: String!
	password: String
	userId: ID
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	summary: AWSJSON
	hash: String
	shortId: String
	url: String
	deleted: Boolean
}

input UpdateDocumentInput {
	id: ID!
	type: String
	name: String
	issuer: String
	password: String
	userId: ID
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	summary: AWSJSON
	hash: String
	shortId: String
	url: String
	deleted: Boolean
}
