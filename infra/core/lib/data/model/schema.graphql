schema {
	query: Query
	mutation: Mutation
}

enum DocStatus {
	PROCESSING
	REJECTED
	PROCESSED
	SUBMITTED
}

enum TransactionDescription {
	OVERDRAFT
	LOAN
	DEPOSIT
	PAYMENT
	SAVING
}

enum TransactionType {
	CREDIT
	DEBIT
}

type User @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	name: String!
	email: AWSEmail!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	apiKey: String!
	status: String!
	deleted: Boolean!
	documents: [Document]
}

type Document @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	type: String!
	name: String!
	issuer: String!
	password: String
	userId: ID!
	user: User
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	summary: AWSJSON
	hash: String
	shortId: String!
	url: String!
	transactions: [Transaction]
	log: [DocumentLog]
	deleted: Boolean!
}

type Transaction @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	type: TransactionType
	description: TransactionDescription
	amount: Float
	details: String
	documentId: ID
	document: Document
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	deleted: Boolean!
}

type DocumentLog @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	documentId: ID!
	document: Document
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	log: String
	deleted: Boolean
}

input DocumentFilter {
	status: DocStatus
	issuer: String
	type: String
}

type Query {
	getUser(id: ID!): User @aws_iam @aws_cognito_user_pools @aws_api_key
	getDocument(id: ID!): Document @aws_iam @aws_cognito_user_pools @aws_api_key
	listDocumentsByUser(userId: ID!): [Document] @aws_iam @aws_cognito_user_pools
	getTransaction(id: ID!): Transaction
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key

	getDocumentLog(id: ID!): DocumentLog @aws_iam @aws_cognito_user_pools
	listUsers: [User] @aws_iam @aws_cognito_user_pools @aws_api_key
	
	listDocuments(
		filter: DocumentFilter
		pagination: PaginationInput
	): PaginatedResult @aws_iam @aws_cognito_user_pools @aws_api_key

	listTransactions: [Transaction] @aws_iam @aws_cognito_user_pools @aws_api_key
	listDocumentLogs: [DocumentLog] @aws_iam @aws_cognito_user_pools
}

type Mutation {
	createUser(input: CreateUserInput!): User @aws_cognito_user_pools
	updateUser(input: UpdateUserInput!): User @aws_cognito_user_pools
	createDocument(input: CreateDocumentInput!): Document @aws_cognito_user_pools
	updateDocument(input: UpdateDocumentInput!): Document
		@aws_iam
		@aws_cognito_user_pools

	createTransaction(input: CreateTransactionInput!): Transaction
		@aws_cognito_user_pools

	createDocumentLog(input: CreateDocumentLogInput!): DocumentLog
		@aws_iam
		@aws_cognito_user_pools
}

# Input types
input CreateUserInput {
	name: String!
	email: AWSEmail!
	apiKey: String!
}

input UpdateUserInput {
	id: ID!
	name: String
	email: AWSEmail
	status: String
	deleted: Boolean
}

input CreateDocumentInput {
	type: String!
	name: String!
	issuer: String!
	password: String
	userId: ID!
	status: DocStatus
	expiryDate: AWSDateTime
	summary: AWSJSON
	hash: String
	shortId: String!
	url: String!
}

input UpdateDocumentInput {
	id: ID!
	status: DocStatus
	password: String
	summary: AWSJSON
}

input CreateTransactionInput {
	type: TransactionType!
	description: TransactionDescription!
	amount: Float!
	details: String!
	documentId: ID!
}

input CreateDocumentLogInput {
	documentId: ID!
}

input PaginationInput {
	limit: Int
	nextToken: String
}

type PaginatedResult {
	items: [Any]
	nextToken: String
}
