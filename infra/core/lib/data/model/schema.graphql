schema {
	query: Query
	mutation: Mutation
}

enum DocStatus {
	PROCESSING
	REJECTED
	PROCESSED
	SUBMITTED
}

enum TransactionDescription {
	OVERDRAFT
	LOAN
	DEPOSIT
	PAYMENT
	SAVING
}

enum TransactionType {
	CREDIT
	DEBIT
}

type User @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	name: String!
	email: AWSEmail!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	apiKey: String
	status: String
	deleted: Boolean
	owner: String
	__typename: String!
}

type Document @aws_iam @aws_cognito_user_pools @aws_api_key {
	id: ID!
	type: String!
	name: String!
	issuer: String!
	password: String
	userId: ID
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	summary: AWSJSON
	hash: String
	shortId: String!
	url: String!
	deleted: Boolean!
	owner: String
	__typename: String!
}

input DocumentFilterInput {
	status: StringFilterInput
}

input StringFilterInput {
	eq: String
	contains: String
}
type ModelDocumentsConnection @aws_iam @aws_cognito_user_pools {
	items: [Document!]!
	nextToken: String
}
type Query {
	getUser(id: ID!): User @aws_iam @aws_cognito_user_pools @aws_api_key
	getDocument(id: ID!): Document @aws_iam @aws_cognito_user_pools @aws_api_key
	listUsers: [User] @aws_iam @aws_cognito_user_pools @aws_api_key
	listDocuments(
		limit: Int
		nextToken: String
		filter: DocumentFilterInput
	): ModelDocumentsConnection @aws_iam @aws_cognito_user_pools @aws_api_key
}

type Mutation {
	createUser(input: CreateUserInput!): User
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
	updateUser(input: UpdateUserInput!): User
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
	createDocument(input: CreateDocumentInput!): Document
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
	updateDocument(input: UpdateDocumentInput!): Document
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
}

type Subscription {
	onCreateDocument: Document
		@aws_subscribe(mutations: ["createDocument"])
		@aws_iam
		@aws_cognito_user_pools
		@aws_api_key
}

# Input types
input CreateUserInput {
	id: ID!
	name: String!
	email: AWSEmail!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	apiKey: String!
	status: String!
	deleted: Boolean!
	__typename: String!
}

input UpdateUserInput {
	id: ID!
	name: String
	email: AWSEmail
	status: String
	deleted: Boolean
}

input CreateDocumentInput {
	id: ID!
	type: String!
	name: String!
	issuer: String!
	password: String
	userId: ID
	status: DocStatus
	expiryDate: AWSDateTime
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	summary: AWSJSON
	hash: String
	shortId: String!
	url: String!
	deleted: Boolean!
	__typename: String!
}

input UpdateDocumentInput {
	id: ID!
	status: DocStatus
	password: String
	summary: AWSJSON
	userId: ID
}
